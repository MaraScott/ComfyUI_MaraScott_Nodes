const t={NAMESPACE:"MaraScott",TYPE:"AnyBus_v2",BUS_SLOT:0,FIRST_INDEX:1,ALLOWED_REROUTE_TYPE:["Reroute (rgthree)"],ALLOWED_GETSET_TYPE:["SetNode","GetNode"],ALLOWED_NODE_TYPE:[],PROFILE:{name:"profile",default:"default"},INPUTS:{name:"inputs",min:2,max:24,default:2},init(t){var e,i;t.properties=t.properties||{},t.properties[this.PROFILE.name]=null!=(e=t.properties[this.PROFILE.name])?e:this.PROFILE.default,t.properties[this.INPUTS.name]=null!=(i=t.properties[this.INPUTS.name])?i:this.INPUTS.default,t.properties.prevProfileName=t.properties[this.PROFILE.name],t.shape=LiteGraph.CARD_SHAPE,t.color=LGraphCanvas.node_colors.green.color,t.bgcolor=LGraphCanvas.node_colors.green.bgcolor,t.groupcolor=LGraphCanvas.node_colors.green.groupcolor,t.size[0]=150,this.updateNodeTitle(t)},updateNodeTitle(t){t.title="AnyBus - "+t.properties[this.PROFILE.name]},updateNodeIO(t){if(!t.graph)return;const e=t.properties[this.INPUTS.name],i=(t.inputs||[]).map((e,i)=>{if(null!=e.link){const a=t.graph.links[e.link];if(a)return{idx:i,link:a}}return null}).filter(Boolean);t.inputs=[],t.outputs=[],t.addInput("bus","BUS"),t.addOutput("bus","BUS");for(let a=1;a<=e;a++){const e=`* ${a.toString().padStart(2,"0")}`.toLowerCase();t.addInput(e,"*"),t.addOutput(e,"*")}i.forEach(({idx:e,link:i})=>{const a=t.graph.getNodeById(i.origin_id);a&&t.connect(e,a,i.origin_slot)}),t.setDirtyCanvas(!0)},setWidgets(t){const e=(e,i)=>{const a=t.widgets.find(t=>t.name===e);a&&(a.value=i)};if(this.getByName(t,this.PROFILE.name)?e(this.PROFILE.name,t.properties[this.PROFILE.name]):t.addWidget("text",this.PROFILE.name,t.properties[this.PROFILE.name],e=>this.setValue(t,this.PROFILE.name,e)),this.getByName(t,this.INPUTS.name))e(this.INPUTS.name,t.properties[this.INPUTS.name]);else{const e=Array.from({length:this.INPUTS.max-this.INPUTS.min+1},(t,e)=>e+this.INPUTS.min);t.addWidget("combo",this.INPUTS.name,t.properties[this.INPUTS.name],e=>this.setValue(t,this.INPUTS.name,e),{values:e})}},getByName(t,e){var i;return null==(i=t.widgets)?void 0:i.find(t=>t.name===e)},setValue(t,e,i){t.properties[e]=i,e===this.PROFILE.name&&this.updateNodeTitle(t),e===this.INPUTS.name&&this.updateNodeIO(t)}};t.ALLOWED_NODE_TYPE=[t.NAMESPACE+t.TYPE,...t.ALLOWED_REROUTE_TYPE,...t.ALLOWED_GETSET_TYPE];const e="Comfy.MaraScott.AnyBus_v2",i=e.replace(/\./g,"-"),a=()=>({name:e,aboutPageBadges:[{label:"Website - MaraScott",url:"https://www.marascott.ai/",icon:"pi pi-home"},{label:"Donate - MaraScott",url:"https://github.com/sponsors/MaraScott",icon:"pi pi-heart"},{label:"GitHub - MaraScott",url:"https://github.com/MaraScott/ComfyUI_MaraScott_Nodes",icon:"pi pi-github"}],bottomPanelTabs:[{id:i,title:"MaraScott Tab",type:"custom",render:t=>{t.innerHTML="<div>This is Mara Scott tab content</div>"}}],async beforeRegisterNodeDef(e){if(e.comfyClass===t.NAMESPACE+t.TYPE){const i=e.prototype.onNodeCreated;e.prototype.onNodeCreated=function(){t.init(this),t.setWidgets(this),t.updateNodeIO(this),null==i||i.apply(this,arguments),this.serialize_widgets=!0}}},async setup(){}}),o=()=>({id:i,icon:"mdi mdi-vector-polyline",title:"Any Bus",tooltip:"Any Bus Dashboard",type:"custom",render:t=>{t.innerHTML="<div>MaraScott</div>"}});export{a as MaraScottAnyBusNodeExtension,o as MaraScottAnyBusNodeSidebarTab};
