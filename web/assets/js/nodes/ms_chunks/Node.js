import{getGraphLinkById as g}from"../AnyBus_v2/Graph.js";const u=(t,r)=>{var a;return(a=t.widgets)==null?void 0:a.find(i=>i.name===r)},n=(t,r,a)=>{var s;const i=u(t,r);i&&(i.value=a,(s=t.setDirtyCanvas)==null||s.call(t,!0,!0))},f=t=>{u(t,p.name)?n(p.name,t.properties[p.name]):t.addWidget("text",p.name,t.properties[p.name],r=>m(t,p.name,r),{title:"Profile name for this bus"})},h=t=>{if(u(t,e.name))n(e.name,t.properties[e.name]);else{const r=Array.from({length:e.max-e.min+1},(a,i)=>i+e.min);t.addWidget("combo",e.name,t.properties[e.name],a=>m(t,e.name,a),{values:r,title:"Number of input/output pairs"})}},b=t=>{var i;if(!t.graph)return;const r=t.properties[e.name],a=(t.inputs||[]).map((s,o)=>{if((s==null?void 0:s.link)!=null){const l=g(t.graph,s.link);if(l)return{idx:o,link:l}}return null}).filter(Boolean);t.inputs=[],t.outputs=[],t.addInput("bus","BUS"),t.addOutput("bus","BUS");for(let s=1;s<=r;s++){const o=`* ${s.toString().padStart(2,"0")}`.toLowerCase();t.addInput(o,"*"),t.addOutput(o,"*")}a.forEach(({idx:s,link:o})=>{const l=t.graph.getNodeById(o.origin_id);l&&t.connect(s,l,o.origin_slot)}),(i=t.setDirtyCanvas)==null||i.call(t,!0,!0)},I=t=>{f(t),h(t)},P="MaraScott",_="AnyBus_v2",N=P+_,p={name:"profile",default:"default"},e={name:"inputs",min:2,max:24,default:2},c=t=>{t.title="AnyBus - "+t.properties[p.name]},m=(t,r,a,i=!1)=>{const s=t.properties[r];t.properties[r]=a,n(t,r,a),r===p.name?(c(t),t.properties.prevProfileName=a):r===e.name&&s!==a&&b(t)},y=t=>{var r,a,i;t.properties=t.properties||{},t.properties[p.name]=(r=t.properties[p.name])!=null?r:p.default,t.properties[e.name]=(a=t.properties[e.name])!=null?a:e.default,t.shape=globalThis.LiteGraph.CARD_SHAPE,t.color=globalThis.LGraphCanvas.node_colors.green.color,t.bgcolor=globalThis.LGraphCanvas.node_colors.green.bgcolor,t.groupcolor=globalThis.LGraphCanvas.node_colors.green.groupcolor,c(t),(i=t.setDirtyCanvas)==null||i.call(t,!0,!0)};export{N as A,e as I,p as P,I as a,m as b,y as i,n as s,b as u};
